---
source: crates/biome_js_analyze/tests/spec_tests.rs
assertion_line: 86
expression: charAtInvalid.json
---
# Input
```cjs
string.charAt(string.length - 1);
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt(string.length - 1);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(string.length·-·1);
  + string.at(-1);
  

```

# Input
```cjs
string.charAt(string.length - 0o11);
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt(string.length - 0o11);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(string.length·-·0o11);
  + string.at(-0o11);
  

```

# Input
```cjs
some.string.charAt(some.string.length - 1);
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ some.string.charAt(some.string.length - 1);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - some.string.charAt(some.string.length·-·1);
  + some.string.at(-1);
  

```

# Input
```cjs
string.charAt((( string.length )) - 0xFF);
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt((( string.length )) - 0xFF);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(((·string.length·))·-·0xFF);
  + string.at(-0xFF);
  

```

# Input
```cjs
string.charAt(string.length - (( 1 )));
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt(string.length - (( 1 )));
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(string.length·-·((·1·)));
  + string.at(-((·1·)));
  

```

# Input
```cjs
string.charAt((( string.length - 1 )));
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt((( string.length - 1 )));
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(((·string.length·-·1·)));
  + string.at(-1);
  

```

# Input
```cjs
(( string )).charAt(string.length - 1);
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ (( string )).charAt(string.length - 1);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - ((·string·)).charAt(string.length·-·1);
  + string.at(-1);
  

```

# Input
```cjs
(( string.charAt ))(string.length - 1);
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ (( string.charAt ))(string.length - 1);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - ((·string.charAt·))(string.length·-·1);
  + string.at(-1);
  

```

# Input
```cjs
(( string.charAt(string.length - 1) ));
```

# Diagnostics
```
charAtInvalid.json:1:4 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ (( string.charAt(string.length - 1) ));
      │    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - ((·string.charAt(string.length·-·1)·));
  + ((·string.at(-1)·));
  

```

# Input
```cjs
string.charAt(string.length - unknown - 1 );
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt(string.length - unknown - 1 );
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(string.length·-·unknown·-·1·);
  + string.at(unknown·+1);
  

```

# Input
```cjs
string.charAt(string.length - (unknown + 1));
```

# Diagnostics
```
charAtInvalid.json:1:1 lint/nursery/useAtIndex  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Replace index references with .at().
  
  > 1 │ string.charAt(string.length - (unknown + 1));
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  
  i Prefer X.at(-Y) over X.charAt(X.length - Y).
  
  i Unsafe fix: Replace index references with .at().
  
  - string.charAt(string.length·-·(unknown·+·1));
  + string.at(-(unknown·+·1));
  

```
